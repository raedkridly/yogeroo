#define _XTAL_FREQ 8000000

#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

#include <xc.h>
#include "lcd.h"
#include <pic16f877a.h>
#include "pwm.h"
#include "stdutils.h"


// BEGIN CONFIG
#pragma config FOSC = HS // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF // Flash Program Memory Code Protection bit (Code protection off)
//END CONFIG

void main()
{
  int a;

  TRISB = 0b00010000;           //RB4 as Input PIN (ECHO)
  TRISD = 0x00; // LCD Pins as Output
  TRISB1 = 0; //RB1 as Output PIN
  Lcd_Init();
  Lcd_Set_Cursor(1,1);
  Lcd_Write_String("Developed By");
  Lcd_Set_Cursor(2,1);
  Lcd_Write_String("    RAED");
  __delay_ms(2000);
  Lcd_Clear();
  Lcd_Set_Cursor(1,1);
  Lcd_Write_String("   Yogeroo");
  Lcd_Set_Cursor(2,1);
  Lcd_Write_String("    FYP");
  __delay_ms(2000);
  Lcd_Clear();
  T1CON = 0x10;                 //Initialize Timer Module
   PWM_Init(0);
   PWM_Init(1);
    
  while(1)
  {
    TMR1H = 0;                  //Sets the Initial Value of Timer
    TMR1L = 0;                  //Sets the Initial Value of Timer

    RB0 = 1;               //TRIGGER HIGH
    __delay_us(10);               //10uS Delay
    RB0 = 0;               //TRIGGER LOW

    while(!RB4);           //Waiting for Echo
    TMR1ON = 1;               //Timer Starts
    while(RB4);            //Waiting for Echo goes LOW
    TMR1ON = 0;               //Timer Stops

    a = (TMR1L | (TMR1H<<8));   //Reads Timer Value
    a = a/58.82;                //Converts Time to Distance
    a = a + 1;
         
    //Distance Calibration
      
    if(a>=13 && a<=15)    //Check whether the result is valid or not
    { 
      Lcd_Clear();
      Lcd_Set_Cursor(1,1);
      Lcd_Write_String("Distance = ");
      Lcd_Set_Cursor(1,14);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,13);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,12);
      Lcd_Write_Char(a%10 + 48);

      Lcd_Set_Cursor(1,15);
      Lcd_Write_String("cm");
      //stop belt from rotating
      RB1 = 1; 
      //initiate the rotation of the servo
      PWM_SetDutyCycle(0,0);   // set the other servo PWM to 0 in order not to interfere
      PWM_SetDutyCycle(1,90);  // set the PWM of the servo to 90% controlling the speed
      PWM_Start(1); 
      __delay_ms(1520/2);      // rotation angular position d=v/t to make a 180 degree rotation to open state
      PWM_SetDutyCycle(1,0);
      __delay_ms(2000);       // dispense for 1 sec
      PWM_Start(1);             //pin 17
      PWM_SetDutyCycle(1,90);
      __delay_ms(1500/2);       // rotation angular position d=v/t to make a 180 degree rotation back to initial position closed
      PWM_SetDutyCycle(1,0);
      // rotate the belt again
      RB1 = 0;
      __delay_ms(1000);     //delay for 1.5 s to stop ultrasonic from taking and stopping at the same position
     }
          
    if(a>=40 && a<=42)    //Check whether the result is valid or not
    {
      Lcd_Clear();
      Lcd_Set_Cursor(1,1);
      Lcd_Write_String("Distance = "); 
      Lcd_Set_Cursor(1,14);
      Lcd_Write_Char(a%10 + 48);
      a = a/10;
      Lcd_Set_Cursor(1,13);
      Lcd_Write_Char(a%10 + 48);
      a = a/10;
      Lcd_Set_Cursor(1,12);
      Lcd_Write_Char(a%10 + 48);
      Lcd_Set_Cursor(1,15);
      Lcd_Write_String("cm");
      //stop belt from rotating
      RB1 = 1;
      //initiate the rotation of the servo
      PWM_SetDutyCycle(1,0);   // set the other servo PWM to 0 in order not to interfere
      PWM_SetDutyCycle(0,90);  // set the PWM of the servo to 90% controlling the speed
      PWM_Start(0);             // pin 16
      __delay_ms(1890/2);       // rotation angular position d=v/t to make a 180 degree rotation to open state
       PWM_SetDutyCycle(0,0);
       __delay_ms(1000);        // dispense for 1 sec
      PWM_SetDutyCycle(0,90); 
      PWM_Start(0); 
      __delay_ms(1880/2);         // rotation angular position d=v/t to make a 180 degree rotation back to initial position closed
       PWM_SetDutyCycle(0,0);
        // rotate the belt again
      RB1 = 0;
      __delay_ms(1000);     //delay for 1.5 s to stop ultrasonic from taking and stopping at the same position
    }
    if(a>=73)
    {
      Lcd_Clear();
      Lcd_Set_Cursor(1,1);
      Lcd_Write_String("Distance = ");
      
      Lcd_Set_Cursor(1,14);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,13);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,12);
      Lcd_Write_Char(a%10 + 48);

      Lcd_Set_Cursor(1,15);
      Lcd_Write_String("cm");
      RB1 = 1;
      __delay_ms(3000);
    }
        
    else
    {
      Lcd_Clear(); 
      RB1=0;
      Lcd_Set_Cursor(1,1);
      Lcd_Write_String("Distance = ");
      
      Lcd_Set_Cursor(1,14);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,13);
      Lcd_Write_Char(a%10 + 48);

      a = a/10;
      Lcd_Set_Cursor(1,12);
      Lcd_Write_Char(a%10 + 48);

      Lcd_Set_Cursor(1,15);
      Lcd_Write_String("cm");
    }
    __delay_ms(200);
  }
}